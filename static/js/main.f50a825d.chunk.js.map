{"version":3,"sources":["actions/transcationActions.js","components/TransactionForm.js","components/TransactionList.js","App.js","reducers/transactionReducer.js","index.js"],"names":["insert","data","type","payload","update","Delete","id","updateIndex","index","TransactionForm","state","returnStateObject","handleInputChange","e","setState","target","name","value","handleSubmit","preventDefault","props","currentIndex","insertTransaction","updateTransaction","this","fName","lName","email","phone","password","list","prevProps","length","className","onSubmit","autoComplete","placeholder","onChange","Component","connect","dispatch","bindActionCreators","actions","TransactionList","handleEdit","updateTransactionIndex","handleDelete","deleteTransaction","map","item","onClick","App","transactionReducer","action","JSON","parse","localStorage","getItem","console","log","push","setItem","stringify","splice","initialState","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f50a825d.chunk.js","sourcesContent":["export const insert = data => {\r\n    return {\r\n        type: 'INSERT',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const update = data => {\r\n    return {\r\n        type: 'UPDATE',\r\n        payload: data\r\n    }\r\n\r\n}\r\n\r\nexport const Delete = id => {\r\n    return {\r\n        type: 'DELETE',\r\n        payload: id\r\n    }\r\n\r\n}\r\n\r\nexport const updateIndex = index => {\r\n    return {\r\n        type: 'UPDATE-INDEX',\r\n        payload: index\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from \"../actions/transcationActions\"\r\nimport { bindActionCreators } from \"redux\";\r\n\r\n\r\nclass TransactionForm extends Component {\r\n\r\n    state = {\r\n        ...this.returnStateObject()\r\n    }\r\n\r\n    returnStateObject() {\r\n        if (this.props.currentIndex === -1)\r\n            return {\r\n                fName: '',\r\n                lName: '',\r\n                email: '',\r\n                phone: '',\r\n                password : ''\r\n            }\r\n        else\r\n            return this.props.list[this.props.currentIndex]\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        \r\n\r\n        if (prevProps.currentIndex !== this.props.currentIndex || prevProps.list.length !== this.props.list.length) {\r\n            this.setState({ ...this.returnStateObject() })\r\n        }\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (this.props.currentIndex === -1)\r\n            this.props.insertTransaction(this.state)\r\n        else\r\n            this.props.updateTransaction(this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <form className=\"form-horizontal\" onSubmit={this.handleSubmit} autoComplete=\"off\">\r\n                <input className=\"col-sm-10 mt-3  grey\" type=\"text\" name=\"fName\" placeholder=\"Ener First Name\" onChange={this.handleInputChange} value={this.state.fName}></input><br />\r\n                <input className=\"col-sm-10 mt-3 grey\" type=\"text\"  name=\"lName\" placeholder=\"Enter Last Name\" onChange={this.handleInputChange} value={this.state.lName} ></input> <br />\r\n                <input className=\"col-sm-10 mt-3 grey\" type=\"email\"  name=\"email\" placeholder=\"Enter Email Address\" onChange={this.handleInputChange} value={this.state.email} /><br />\r\n                <input className=\"col-sm-10 mt-3 grey\" type=\"tel\"  name=\"phone\" placeholder=\"Enter Phone\" onChange={this.handleInputChange} value={this.state.phone} /><br />\r\n                <input className=\"col-sm-10 mt-3 grey\" type=\"password\"  name=\"password\" placeholder=\"Enter password\" onChange={this.handleInputChange} value={this.state.password} /><br />\r\n                <button className=\"btn btn-success mt-5 btn-sm grey width\" type=\"submit\">Submit</button>\r\n            </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        list: state.list,\r\n        currentIndex: state.currentIndex\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators({\r\n        insertTransaction: actions.insert,\r\n        updateTransaction: actions.update\r\n    }, dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionForm)","import React, { Component } from 'react'\r\nimport TransactionForm from './TransactionForm'\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/transcationActions\"\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nclass TransactionList extends Component {\r\n\r\n\r\n    handleEdit = (index) => {\r\n        this.props.updateTransactionIndex(index)\r\n    }\r\n\r\n    handleDelete = (index) => {\r\n        this.props.deleteTransaction(index)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <TransactionForm />\r\n                <hr />\r\n                <table className=\"table table-striped table-bordered table-hover table-condensed\">\r\n                    <tbody>\r\n                        {this.props.list.map((item, index) => {\r\n                            return <tr className=\"info\" key={index}>\r\n                                <td >{item.fName}</td>\r\n                                <td >{item.lName}</td>\r\n                                <td >{item.email}</td>\r\n                                <td >{item.phone}</td>\r\n                                <td >{item.password}</td>\r\n                                <td><button className=\"btn-warning\" onClick={() => this.handleEdit(index)}>Edit</button></td>\r\n                                <td><button className=\"btn-danger\" onClick={() => this.handleDelete(index)}>Delete</button></td>\r\n                            </tr>\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        list: state.list\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        updateTransactionIndex: actions.updateIndex,\r\n        deleteTransaction: actions.Delete\r\n    }, dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionList)","\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport TransactionList from './components/TransactionList';\n\nfunction App() {\n  return(\n  <div>\n    <TransactionList />\n     \n    </div>\n  );\n}\n\nexport default App;\n","\r\n\r\nexport const transactionReducer = (state, action) => {\r\n    var list = JSON.parse(localStorage.getItem('transactions'))\r\n    console.log(list, \"JSON obj data\");\r\n    \r\n \r\n    switch (action.type) {\r\n        case 'INSERT':\r\n            list.push(action.payload)\r\n            localStorage.setItem('transactions', JSON.stringify(list))\r\n            return { list, currentIndex: -1 }\r\n        case 'UPDATE':\r\n            list[state.currentIndex] = action.payload\r\n            localStorage.setItem('transactions', JSON.stringify(list))\r\n            return { list, currentIndex: -1 }\r\n\r\n        case 'UPDATE-INDEX':\r\n            return { list, currentIndex: action.payload }\r\n\r\n        case 'DELETE':\r\n            list.splice(action.payload, 1)\r\n            localStorage.setItem('transactions', JSON.stringify(list))\r\n            return { list, currentIndex: -1 }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default transactionReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import JsonData from \"./JsonData.json\"\n\nimport { createStore } from \"redux\";\nimport transactionReducer from \"./reducers/transactionReducer\";\nimport { Provider } from \"react-redux\";\n\nif (localStorage.getItem('transactions') == null)\n    localStorage.setItem('transactions', JSON.stringify([]))\n    \nlet initialState = {\n    currentIndex: -1,\n    list: JSON.parse(localStorage.getItem('transactions'))\n    \n}\nconst store = createStore(transactionReducer, initialState)\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}